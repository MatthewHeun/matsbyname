% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/named_indexed.R
\name{to_named_indexed}
\alias{to_named_indexed}
\alias{to_indexed}
\alias{to_named}
\title{Convert a matrix or list of matrices from named form to indexed form}
\usage{
to_indexed(
  a,
  index_map,
  row_index_colname = "i",
  col_index_colname = "j",
  val_colname = "x",
  rownames_colname = "rownames",
  colnames_colname = "colnames"
)

to_named(a, index_map)
}
\arguments{
\item{a}{For \code{\link[=to_indexed]{to_indexed()}}, a matrix or list of matrices to be converted to indexed form.
For \code{\link[=to_named]{to_named()}}, a data frame or list of data frames in indexed form to be converted to named form.}

\item{index_map}{A mapping between row and column names
and row and column indices.
See details.}
}
\value{
\code{\link[=to_indexed]{to_indexed()}} returns \code{a} as a data frame in indexed form.
\code{\link[=to_named]{to_named()}} returns \code{a} in named form.
}
\description{
Matrices can be in named form or indexed form.
Named form is the usual representation for the \code{matsindf} package,
wherein names for rows and columns are included in the \code{dimnames}
attribute of the matrix object, consuming memory.
Typically, neither zero rows nor zero columns are present.
In some instances,
many sparse matrices with the same names will be created,
leading to inefficiencies.
It would be more memory-efficient to store the matrices in
indexed form,
(a sparse format with matrix data represented as a
row integer (i), column integer (j), and value (x) triplet,
made possible by the \code{Matrix} package) and
maintain a separate (external) mapping between
row and column indices and row and column names.
(In indexed form, it becomes the responsibility of the caller
to maintain a consistent mapping between row and column indices
and row and column names.)
These functions convert from named form to indexed form
(\code{\link[=to_indexed]{to_indexed()}})
and vice versa (\code{\link[=to_named]{to_named()}})
using externally supplied mappings
in the \code{index_map} argument.
}
\details{
\code{index_map} can be a single data frame,
an unnamed list of two data frames, or
a named list of one or more data frames.
\itemize{
\item If a single data frame,
\code{index_map} must have two columns,
one containing exclusively integers
(interpreted as row and column indices)
and
the other containing exclusively character strings
(interpreted as row and column names).
\item If an unnamed list of two data frames,
each data frame must have only
an integer column and a character column.
The first data frame of \code{index_map}
is interpreted as the mapping
between row names and row indices
and
the second data frame of \code{index_map}
is interpreted as the mapping
between column names and column indices.
\item If a named list of data frames,
all data frames must have only an integer column and
a character column.
The names of \code{index_map}
are interpreted as row and column types,
with each named data frame applied as the mapping for the
associated row or column type.
For example the data frame named "Industry" would be applied
to the dimension with an "Industry" type, regardless
of whether rows or columns (could be both)
were of type "Industry".
When sending named data frames in \code{index_map},
\code{a} must have both a row type and a column type.
If an appropriate mapping cannot be found in \code{index_map},
an error is raised.
}

It is an error to repeat a name in the name column of an \code{index_map}.
It is an error to repeat an index in the index column
of an \code{index_map}.
}
