% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Binary.R
\name{sum_byname}
\alias{sum_byname}
\title{Name-wise addition of matrices}
\usage{
sum_byname(..., .summarise = FALSE)
}
\arguments{
\item{...}{Operands: constants, matrices, or lists of matrices.}

\item{.summarise}{When \code{TRUE}, a single list of operands is summed together.
When \code{FALSE} (the default), all items in a single list of operands
are summed together, returning only one result.}
}
\value{
A matrix representing the name-wise sum of arguments.
}
\description{
Performs a union and sorting of addend and augend row and column names prior to summation.
Zeroes are inserted for missing matrix elements.
Treats missing or \code{NULL} operands as \code{0}.
}
\details{
A single list of operands is ambiguous:
should it be returned, because each element is only
the first addend of a series of sums without an augend,
in which case the length of the returned object is the same as the
length of the input?
Or should the list of objects be summed together,
returning only a single item, as in the \code{dplyr::summarise()} function?
The \code{summarise} argument distinguishes between these two cases.
The default value for \code{summarise} is \code{FALSE}, giving the first behavior.
Set \code{summarise} to \code{TRUE} to cause this function to act like \code{dplyr::summarise()}
for its list of arguments.
}
\examples{
library(dplyr)
sum_byname(2, 2)
sum_byname(2, 2, 2)
sum_byname(2, 2, -2, -2)
productnames <- c("p1", "p2")
industrynames <- c("i1", "i2")
U <- matrix(1:4, ncol = 2, dimnames = list(productnames, industrynames)) \%>\%
  setrowtype("Products") \%>\% setcoltype("Industries")
Y <- matrix(1:4, ncol = 2, dimnames = list(rev(productnames), rev(industrynames))) \%>\%
  setrowtype("Products") \%>\% setcoltype("Industries")
sum_byname(U, 100)
sum_byname(200, Y)
U + Y # Non-sensical.  Row and column names not respected.
sum_byname(U, U)
sum_byname(U, Y)
sum_byname(U, U, Y, Y)
V <- matrix(1:4, ncol = 2, dimnames = list(industrynames, productnames)) \%>\%
  setrowtype("Industries") \%>\% setcoltype("Products")
U + V # row and column names are non-sensical and blindly taken from first argument (U)
\dontrun{sum_byname(U, V)} # Fails, because row and column types are different
# This also works with lists
sum_byname(list(U,U), list(Y,Y))
sum_byname(list(U,U), list(100,100))
sum_byname(list(U,U), as.list(rep_len(100, 2)))
DF <- data.frame(U = I(list()), Y = I(list()))
DF[[1,"U"]] <- U
DF[[2,"U"]] <- U
DF[[1,"Y"]] <- Y
DF[[2,"Y"]] <- Y
sum_byname(DF$U, DF$Y)
DF \%>\% mutate(sums = sum_byname(U, Y))
sum_byname(U) # If only one argument, return it.
sum_byname(2, NULL) # Gives 2
sum_byname(2, NA)   # Gives NA
sum_byname(NULL, 1) # Gives 1
sum_byname(list(NULL, 1), list(1, 1))
DF2 <- data.frame(U = I(list()), Y = I(list()))
DF2[[1,"U"]] <- NULL
DF2[[2,"U"]] <- U
DF2[[1,"Y"]] <- Y
DF2[[2,"Y"]] <- Y
sum_byname(DF2$U, DF2$Y)
DF3 <- DF2 \%>\% mutate(sums = sum_byname(U, Y))
DF3
DF3$sums[[1]]
DF3$sums[[2]]
}
